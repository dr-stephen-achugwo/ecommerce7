/** @type {import('eslint').Linter.Config} */
module.exports = {
  env: { browser: true, node: true, es2022: true },
  parserOptions: { project: true, tsconfigRootDir: __dirname },
  root: true,
  reportUnusedDisableDirectives: true,
  settings: {
    react: { version: 'detect' },
    'import/resolver': { node: { extensions: ['.js', '.ts', '.tsx'] } },
  },
  extends: [
    'plugin:import/typescript',
    'plugin:typescript-sort-keys/recommended',
    'eslint:all',
    'plugin:@typescript-eslint/all',
    'plugin:react/all',
    'plugin:unicorn/all',
    'next/core-web-vitals',
    'plugin:functional/strict',
    'plugin:jsx-a11y/strict',
    'plugin:regexp/all',
    'plugin:typescript-compat/recommended',
    'prettier',
  ],
  plugins: [
    'tailwindcss',
    'sort-keys-fix',
    'sort-destructure-keys',
    'unused-imports',
    'sort-exports',
    'strict-dependencies',
    'tree-shakable',
    'promise',
    '@susisu/safe-typescript',
    'jsx-expressions',
    'sonarjs',
    '@shopify/eslint-plugin',
    'functional',
    'redos',
  ],
  settings: {
    tailwindcss: {
      callees: ['cn'],
    },
  },
  rules: {
    'tailwindcss/classnames-order': 'off',
    'tailwindcss/enforces-negative-arbitrary-values': 'error',
    'tailwindcss/enforces-shorthand': 'error',
    'tailwindcss/migration-from-tailwind-2': 'error',
    'tailwindcss/no-arbitrary-value': 'error',
    'tailwindcss/no-custom-classname': 'off',
    'tailwindcss/no-contradicting-classname': 'error',
    'sort-keys-fix/sort-keys-fix': 'error',
    'sort-destructure-keys/sort-destructure-keys': 'error',
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'error',
      {
        vars: 'all',
        varsIgnorePattern: '^_',
        args: 'after-used',
        argsIgnorePattern: '^_',
      },
    ],
    'strict-dependencies/strict-dependencies': [
      'error',
      [
        {
          module: 'components/root',
          allowReferenceFrom: ['src/pages/index.tsx', 'src/components/root', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'components/items',
          allowReferenceFrom: ['src/pages/items/*.tsx', 'src/components/items', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'components/cart',
          allowReferenceFrom: ['src/pages/cart/index.tsx', 'src/components/cart', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/hooks/root',
          allowReferenceFrom: ['src/pages/index.tsx', 'src/components/root', 'src/lib/hooks/root', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/hooks/items',
          allowReferenceFrom: ['src/pages/items/*.tsx', 'src/components/items', 'src/lib/hooks/items', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/hooks/cart',
          allowReferenceFrom: ['src/pages/cart/index.tsx', 'src/components/cart', 'src/lib/hooks/cart', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/helper/root',
          allowReferenceFrom: ['src/pages/index.tsx', 'src/components/root', 'src/lib/helper/root', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/helper/items',
          allowReferenceFrom: ['src/pages/items/*.tsx', 'src/components/items', 'src/lib/helper/items', 'src/test'],
          allowSameModule: true,
        },
        {
          module: 'lib/helper/cart',
          allowReferenceFrom: ['src/pages/cart/index.tsx', 'src/components/cart', 'src/lib/helper/cart', 'src/test'],
          allowSameModule: true,
        },
      ],
      { resolveRelativeImport: true },
    ],
    'sort-exports/sort-exports': ['error', { sortDir: 'asc', sortExportKindFirst: 'type' }],
    'sort-imports': ['error', { ignoreDeclarationSort: true }],
    'no-restricted-imports': ['error', { patterns: ['./*', '!./*.module.css', '../*'] }],
    'import/no-unassigned-import': 'off',
    'import/no-default-export': 'off',
    'import/no-cycle': 'off',
    'import/extensions': 'off',
    'import/prefer-default-export': 'off',
    'import/no-duplicates': ['error', { considerQueryString: true }],
    'import/no-unused-modules': [
      'error',
      {
        missingExports: true,
        unusedExports: true,
        src: ['src'],
        ignoreExports: ['src/pages', 'src/middleware.ts', '**/*.d.ts'],
      },
    ],
    'import/order': [
      'error',
      {
        pathGroups: [{ pattern: '~/**', group: 'external', position: 'after' }],
        'newlines-between': 'always',
        alphabetize: { order: 'asc', caseInsensitive: false },
      },
    ],
    'no-duplicate-imports': 'off',
    'no-warning-comments': 'off',
    'line-comment-position': 'off',
    'no-inline-comments': 'off',
    'no-unused-vars': 'off',
    'no-undefined': 'off',
    'one-var': 'off',
    'no-ternary': 'off',
    'no-nested-ternary': 'off',
    'no-implicit-coercion': 'off',
    'id-length': 'off',
    'multiline-comment-style': 'off',
    'capitalized-comments': 'off',
    'no-unneeded-ternary': ['error', { defaultAssignment: false }],
    'max-params': ['error', 3],
    'max-nested-callbacks': ['error', 3],
    'max-statements': ['error', 20],
    'max-lines-per-function': ['error', 100],
    'prefer-destructuring': [
      'error',
      {
        VariableDeclarator: { array: true, object: true },
        AssignmentExpression: { array: true, object: true },
      },
      { enforceForRenamedProperties: true },
    ],
    'no-return-await': 'off',
    'no-restricted-syntax': [
      'error',
      {
        selector: 'TSEnumDeclaration',
        message: "Don't declare enums",
      },
      {
        selector:
          "ExportNamedDeclaration > VariableDeclaration[declarations.length=1][kind='const'] > VariableDeclarator[id.name='getStaticProps'] BlockStatement ThrowStatement",
        message: "Don't throw an Error in getStaticProps, use notFound",
      },
    ],
    '@typescript-eslint/no-import-type-side-effects': 'off',
    '@typescript-eslint/dot-notation': 'off',
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/no-magic-numbers': 'off',
    '@typescript-eslint/no-type-alias': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],
    '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'never' }],
    '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
    '@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports', disallowTypeAnnotations: false }],
    '@typescript-eslint/no-unused-expressions': ['error', { allowTernary: true }],
    '@typescript-eslint/naming-convention': [
      'error',
      { selector: 'typeAlias', format: ['PascalCase'] },
      { selector: 'typeParameter', format: ['PascalCase'] },
      {
        selector: 'variable',
        format: ['strictCamelCase', 'StrictPascalCase'],
      },
      { selector: 'function', format: ['strictCamelCase'] },
      { selector: 'parameter', format: ['strictCamelCase'] },
      {
        selector: 'variable',
        types: ['boolean'],
        format: ['PascalCase'],
        prefix: ['is', 'should'],
      },
    ],
    'react/function-component-definition': 'off',
    'react/jsx-filename-extension': 'off',
    'react/jsx-no-literals': 'off',
    'react/jsx-no-bind': 'off',
    'react/no-danger': 'off',
    'react/require-optimization': 'off',
    'react/require-default-props': 'off',
    'react/jsx-sort-props': [
      'error',
      {
        callbacksLast: false,
        ignoreCase: false,
        noSortAlphabetically: false,
        reservedFirst: false,
        shorthandFirst: false,
        shorthandLast: false,
      },
    ],
    'react/jsx-max-depth': ['error', { max: 6 }],
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': ['error', { additionalHooks: '(useRecoilCallback|useRecoilTransaction_UNSTABLE)' }],
    'tree-shakable/import-star': ['error'],
    'promise/always-return': 'error',
    'promise/no-return-wrap': 'error',
    'promise/param-names': 'error',
    'promise/catch-or-return': 'error',
    'promise/no-native': 'off',
    'promise/no-nesting': 'error',
    'promise/no-promise-in-callback': 'error',
    'promise/no-callback-in-promise': 'error',
    'promise/avoid-new': 'error',
    'promise/no-new-statics': 'error',
    'promise/no-return-in-finally': 'error',
    'promise/valid-params': 'error',
    'promise/prefer-await-to-then': 'error',
    'promise/prefer-await-to-callbacks': 'error',
    'promise/no-multiple-resolved': 'error',
    '@susisu/safe-typescript/no-object-assign': 'error',
    '@susisu/safe-typescript/no-unsafe-object-enum-method': 'error',
    '@susisu/safe-typescript/no-unsafe-object-property-check': 'error',
    '@susisu/safe-typescript/no-unsafe-object-property-overwrite': 'error',
    'jsx-expressions/strict-logical-expressions': 'error',
    'sonarjs/no-all-duplicated-branches': 'error',
    'sonarjs/no-element-overwrite': 'error',
    'sonarjs/no-empty-collection': 'error',
    'sonarjs/no-extra-arguments': 'error',
    'sonarjs/no-identical-conditions': 'error',
    'sonarjs/no-identical-expressions': 'error',
    'sonarjs/no-ignored-return': 'error',
    'sonarjs/no-one-iteration-loop': 'error',
    'sonarjs/no-use-of-empty-return-value': 'error',
    'sonarjs/non-existent-operator': 'error',
    'sonarjs/cognitive-complexity': ['error', 14],
    'sonarjs/elseif-without-else': 'error',
    'sonarjs/max-switch-cases': 'error',
    'sonarjs/no-collapsible-if': 'error',
    'sonarjs/no-collection-size-mischeck': 'error',
    'sonarjs/no-duplicate-string': 'error',
    'sonarjs/no-duplicated-branches': 'error',
    'sonarjs/no-gratuitous-expressions': 'error',
    'sonarjs/no-identical-functions': 'error',
    'sonarjs/no-inverted-boolean-check': 'error',
    'sonarjs/no-nested-switch': 'error',
    // "sonarjs/no-nested-template-literals": "error",
    'sonarjs/no-redundant-boolean': 'error',
    'sonarjs/no-redundant-jump': 'error',
    'sonarjs/no-same-line-conditional': 'error',
    'sonarjs/no-small-switch': 'error',
    'sonarjs/no-unused-collection': 'error',
    'sonarjs/no-useless-catch': 'error',
    'sonarjs/prefer-immediate-return': 'error',
    'sonarjs/prefer-object-literal': 'error',
    'sonarjs/prefer-single-boolean-return': 'error',
    'sonarjs/prefer-while': 'error',
    'unicorn/prevent-abbreviations': 'off',
    'unicorn/new-for-builtins': 'off',
    'unicorn/no-useless-undefined': 'off',
    'unicorn/no-null': 'off',
    'unicorn/filename-case': 'off',
    'unicorn/no-keyword-prefix': 'off',
    // "@shopify/binary-assignment-parens": "error",
    '@shopify/class-property-semi': 'error',
    '@shopify/images-no-direct-imports': 'error',
    // "@shopify/jest/no-snapshots": "error",
    // "@shopify/jsx-no-complex-expressions": "error",
    '@shopify/jsx-no-hardcoded-content': 'error',
    '@shopify/jsx-prefer-fragment-wrappers': 'error',
    '@shopify/no-namespace-imports': 'error',
    '@shopify/no-useless-computed-properties': 'error',
    '@shopify/prefer-class-properties': 'error',
    '@shopify/prefer-early-return': ['error', { maximumStatements: 0 }],
    // "@shopify/no-ancestor-directory-import": "error",
    '@shopify/prefer-module-scope-constants': 'error',
    '@shopify/prefer-twine': 'error',
    '@shopify/react-hooks-strict-return': 'error',
    '@shopify/react-initialize-state': 'error',
    '@shopify/react-no-multiple-render-methods': 'error',
    '@shopify/react-prefer-private-members': 'error',
    '@shopify/react-type-state': 'error',
    '@shopify/restrict-full-import': 'error',
    // '@shopify/sinon-no-restricted-features': 'error',
    // '@shopify/sinon-prefer-meaningful-assertions': 'error',
    // "@shopify/strict-component-boundaries": "error",
    '@shopify/typescript/prefer-pascal-case-enums': 'error',
    '@shopify/typescript/prefer-singular-enums': 'error',
    '@shopify/typescript/prefer-build-client-schema': 'error',
    '@shopify/webpack/no-unnamed-dynamic-imports': 'error',
    '@next/next/no-img-element': 'error',
    'functional/prefer-readonly-type': 'off',
    'functional/functional-parameters': 'off',
    'functional/immutable-data': 'off',
    'functional/no-return-void': 'off',
    'functional/prefer-immutable-types': 'off',
    'functional/type-declaration-immutability': 'off',
    'functional/no-expression-statements': 'off',
    'functional/no-throw-statements': 'off',
    'functional/no-conditional-statements': 'off',
    'functional/no-try-statements': 'off',
    'functional/no-mixed-types': 'off',
    // 'jsx-a11y/anchor-ambiguous-text': 'error',
    'jsx-a11y/control-has-associated-label': 'error',
    'jsx-a11y/lang': 'error',
    // 'jsx-a11y/prefer-tag-over-role': 'error',
    'jsx-a11y/anchor-is-valid': [
      'error',
      {
        aspects: ['invalidHref', 'preferButton'],
        components: ['Link'],
        specialLink: ['hrefLeft', 'hrefRight'],
      },
    ],
    'regexp/no-unused-capturing-group': [
      'error',
      {
        fixable: true,
      },
    ],
    'redos/no-vulnerable': 'error',
  },
  overrides: [
    {
      files: ['src/pages/**/*', 'src/components/**/*'],
      rules: { '@typescript-eslint/prefer-readonly-parameter-types': 'off' },
    },
    { files: ['src/**/index.ts'], rules: { 'no-restricted-imports': 'off' } },
    {
      files: ['src/lib/type/**/*', 'src/**/*.type.ts'],
      rules: { 'sort-exports/sort-exports': 'off' },
    },
    {
      files: ['src/lib/config.ts', 'src/lib/gtag.ts'],
      rules: { camelcase: 'off' },
    },
    {
      plugins: ['vitest'],
      extends: ['plugin:testing-library/react', 'plugin:jest-dom/recommended', 'plugin:jest/all'],
      env: {
        'jest/globals': true,
      },
      files: ['**/*.test.*'],
      rules: {
        // 'vitest/expect-expect': 'error',
        // 'vitest/lower-case-title': 'error',
        // 'vitest/max-nested-describe': ['error', { max: 1 }],
        // 'vitest/no-conditional-tests': 'error',
        'vitest/no-focused-tests': 'error',
        'vitest/no-identical-title': 'error',
        'vitest/no-skipped-tests': 'error',
      },
    },
    { extends: 'plugin:playwright/playwright-test', files: ['**/*.spec.*'] },
    { extends: 'plugin:storybook/recommended', files: ['**/*.stories.*'] },
    {
      files: [
        'src/test/**/*',
        'src/**/*.test.*',
        'src/**/*.stories.tsx',
        'playwright/**/*',
        'src/test/msw/*',
        'playwright.config.ts',
      ],
      rules: {
        'import/no-unused-modules': 'off',
        'sort-exports/sort-exports': 'off',
        'no-console': 'off',
        'max-lines': 'off',
        'no-restricted-imports': 'off',
        'max-statements': 'off',
        'max-lines-per-function': 'off',
        'react/display-name': 'off',
        'react/jsx-no-useless-fragment': 'off',
        'react/jsx-props-no-spreading': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/consistent-type-assertions': 'off',
        '@typescript-eslint/no-require-imports': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/naming-convention': 'off',
        '@typescript-eslint/no-dynamic-delete': 'off',
        '@typescript-eslint/prefer-readonly-parameter-types': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/unbound-method': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-empty-function': 'off',
        'sonarjs/no-duplicate-string': 'off',
        'unicorn/consistent-function-scoping': 'off',
        'unicorn/prefer-module': 'off',
        '@shopify/jsx-no-hardcoded-content': 'off',
        'functional/no-let': 'off',
        'jest/no-hooks': 'off',
        'jest/prefer-expect-assertions': 'off',
        'jest/max-expects': 'off',
        'jest/unbound-method': 'off',
        'jest/prefer-lowercase-title': 'off',
        'jest/no-commented-out-tests': 'off',
        'jest/require-hook': 'off',
      },
    },
  ],
}
